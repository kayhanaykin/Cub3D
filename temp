{
    "C++ Common Libs": {
        "prefix": "libcpp", // The prefix you'll type to trigger the snippet
        "body": [
            "#include <string>", // Add other common includes here if needed
            "#include <iostream>",
            "",
            "int main(void)",
            "{",
            "    $0",
            "}",
        ],
        "description": "Add two common libraries, iostream and string"
    },

    "C++ Class with .h/.cpp": {
        "prefix": "classcpp", // The prefix you'll type to trigger the snippet
        "body": [
            "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
            "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
            "",
            "#include <string>", // Add other common includes here if needed
            "#include <iostream>",
            "",
            "class ${TM_FILENAME_BASE} {",
            "public:",
            "    ${TM_FILENAME_BASE}();",
            "    ~${TM_FILENAME_BASE}();",
            "",
            "    void someMethod();",
            "",
            "private:",
            "    std::string _name;",
            "};",
            "",
            "#endif",
            "",
            "#include \"${TM_FILENAME_BASE}.hpp\"",
            "",
            "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}() {",
            "    std::cout << \"${TM_FILENAME_BASE} constructed\\n\";",
            "}",
            "",
            "${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}() {",
            "    std::cout << \"${TM_FILENAME_BASE} destructed\\n\";",
            "}",
            "",
            "void ${TM_FILENAME_BASE}::someMethod() {",
            "    std::cout << \"someMethod called\\n\";",
            "}"
        ],
        "description": "Creates a C++ class with .h and .cpp files"
    }
}
